;;; site-gentoo.el --- site initialisation for Gentoo-installed packages

;;; Commentary:
;; Automatically generated by elisp-common.eclass
;; DO NOT EDIT THIS FILE

;;; Code:

;;; emacs-24 site-lisp configuration

(when (string-match "\\`24\\.2\\>" emacs-version)
  ;;(setq find-function-C-source-directory
  ;;      "/usr/share/emacs/24.2/src")
  (let ((path (getenv "INFOPATH"))
	(dir "/usr/share/info/emacs-24")
	(re "\\`/usr/share/info\\>"))
    (and path
	 ;; move Emacs Info dir before anything else in /usr/share/info
	 (let* ((p (cons nil (split-string path ":" t))) (q p))
	   (while (and (cdr q) (not (string-match re (cadr q))))
	     (setq q (cdr q)))
	   (setcdr q (cons dir (delete dir (cdr q))))
	   (setq Info-directory-list (prune-directory-list (cdr p)))))))

;;; auctex site-lisp configuration

(add-to-list 'load-path "/usr/share/emacs/site-lisp/auctex")
(require 'tex-site)

;; detect needed steps after rebuild
(setq TeX-parse-self t)

;;; auto-complete site-lisp configuration

(add-to-list 'load-path "/usr/share/emacs/site-lisp/auto-complete")
(autoload 'auto-complete-mode "auto-complete" "AutoComplete mode" t)
(setq ac-dictionary-directories "/usr/share/emacs/etc/auto-complete/dict")

;;; autoconf-mode site-lisp configuration

(add-to-list 'load-path "/usr/share/emacs/site-lisp/autoconf-mode")
(autoload 'autoconf-mode "autoconf-mode"
  "Major mode for editing autoconf files." t)
(autoload 'autotest-mode "autotest-mode"
  "Major mode for editing autotest files." t)
(add-to-list 'auto-mode-alist
	     '("\\.ac\\'\\|configure\\.in\\'" . autoconf-mode))
(add-to-list 'auto-mode-alist
	     '("\\.at\\'" . autotest-mode))

;;; cmake site-lisp configuration

(add-to-list 'load-path "/usr/share/emacs/site-lisp/cmake")
(autoload 'cmake-mode "cmake-mode" "Major mode for editing CMake files." t)
(add-to-list 'auto-mode-alist '("CMakeLists\\.txt\\'" . cmake-mode))
(add-to-list 'auto-mode-alist '("\\.cmake\\'" . cmake-mode))

;;; color-theme site-lisp configuration

(add-to-list 'load-path "/usr/share/emacs/site-lisp/color-theme")

(autoload (quote color-theme-select) "color-theme" "\
Displays a special buffer for selecting and installing a color theme.
With optional prefix ARG, this buffer will include color theme libraries
as well.  A color theme library is in itself not complete, it must be
used as part of another color theme to be useful.  Thus, color theme
libraries are mainly useful for color theme authors." t nil)

(autoload (quote color-theme-describe) "color-theme" "\
Describe color theme listed at point.
This shows the documentation of the value of text-property color-theme
at point.  The text-property color-theme should be a color theme
function.  See `color-themes'." t nil)

(autoload (quote color-theme-install-at-mouse) "color-theme" "\
Install color theme clicked upon using the mouse.
First argument EVENT is used to set point.  Then
`color-theme-install-at-point' is called." t nil)

(autoload (quote color-theme-install-at-point-for-current-frame) "color-theme" "\
Install color theme at point for current frame only.
Binds `color-theme-is-global' to nil and calls
`color-theme-install-at-point'." t nil)

(autoload (quote color-theme-print) "color-theme" "\
Print the current color theme function.

You can contribute this function to <URL:news:gnu.emacs.sources> or
paste it into your .emacs file and call it.  That should recreate all
the settings necessary for your color theme.

Example:

    (require 'color-theme)
    (defun my-color-theme ()
      \"Color theme by Alex Schroeder, created 2000-05-17.\"
      (interactive)
      (color-theme-install
       '(...
	 ...
	 ...)))
    (my-color-theme)

If you want to use a specific color theme function, you can call the
color theme function in your .emacs directly.

Example:

    (require 'color-theme)
    (color-theme-gnome2)" t nil)

(autoload (quote color-theme-analyze-defun) "color-theme" "\
Once you have a color-theme printed, check for missing faces.
This is used by maintainers who receive a color-theme submission
and want to make sure it follows the guidelines by the color-theme
author." t nil)

(autoload (quote color-theme-make-snapshot) "color-theme" "\
Return the definition of the current color-theme.
The function returned will recreate the color-theme in use at the moment." nil nil)

(autoload (quote color-theme-compare) "color-theme" "\
Compare two color themes.
This will print the differences between installing THEME-A and
installing THEME-B.  Note that the order is important: If a face is
defined in THEME-A and not in THEME-B, then this will not show up as a
difference, because there is no reset before installing THEME-B.  If a
face is defined in THEME-B and not in THEME-A, then this will show up as
a difference." t nil)

(autoload (quote color-theme-install) "color-theme" "\
Install a color theme defined by frame parameters, variables and faces.

The theme is installed for all present and future frames; any missing
faces are created.  See `color-theme-install-faces'.

THEME is a color theme definition.  See below for more information.

If you want to install a color theme from your .emacs, use the output
generated by `color-theme-print'.  This produces color theme function
which you can copy to your .emacs.

A color theme definition is a list:
\([FUNCTION] FRAME-PARAMETERS VARIABLE-SETTINGS FACE-DEFINITIONS)

FUNCTION is the color theme function which called `color-theme-install'.
This is no longer used.  There was a time when this package supported
automatic factoring of color themes.  This has been abandoned.

FRAME-PARAMETERS is an alist of frame parameters.  These are installed
with `color-theme-install-frame-params'.  These are installed last such
that any changes to the default face can be changed by the frame
parameters.

VARIABLE-DEFINITIONS is an alist of variable settings.  These are
installed with `color-theme-install-variables'.

FACE-DEFINITIONS is an alist of face definitions.  These are installed
with `color-theme-install-faces'.

If `color-theme-is-cumulative' is nil, a color theme will undo face and
frame-parameter settings of previous color themes." nil nil)

(autoload (quote color-theme-submit) "color-theme" "\
Submit your color-theme to the maintainer." t nil)

(autoload (quote color-theme-initialize) "color-theme" "\
Initialize the color theme package by loading color-theme-libraries." t nil)

;;; cscope site-lisp configuration

(add-to-list 'load-path "/usr/share/emacs/site-lisp/cscope")

(autoload 'cscope-minor-mode "xcscope")
(autoload 'cscope-display-buffer "xcscope"
  "Display the *cscope* buffer." t)
(autoload 'cscope-display-buffer-toggle "xcscope"
  "Toggle cscope-display-cscope-buffer, which corresponds to
\"Auto display *cscope* buffer\"." t)
(autoload 'cscope-next-symbol "xcscope"
  "Move to the next symbol in the *cscope* buffer." t)
(autoload 'cscope-next-file "xcscope"
  "Move to the next file in the *cscope* buffer." t)
(autoload 'cscope-prev-symbol "xcscope"
  "Move to the previous symbol in the *cscope* buffer." t)
(autoload 'cscope-prev-file "xcscope"
  "Move to the previous file in the *cscope* buffer." t)
(autoload 'cscope-pop-mark "xcscope"
  "Pop back to where cscope was last invoked." t)
(autoload 'cscope-set-initial-directory "xcscope"
  "Set the cscope-initial-directory variable." t)
(autoload 'cscope-unset-initial-directory "xcscope"
  "Unset the cscope-initial-directory variable." t)
(autoload 'cscope-find-this-symbol "xcscope"
  "Locate a symbol in source code." t)
(autoload 'cscope-find-global-definition "xcscope"
  "Find a symbol's global definition." t)
(autoload 'cscope-find-global-definition-no-prompting "xcscope"
  "Find a symbol's global definition without prompting." t)

(defun cscope:hook ()
  (cscope-minor-mode))
(add-hook 'c-mode-hook 'cscope:hook)
(add-hook 'c++-mode-hook 'cscope:hook)
(add-hook 'dired-mode-hook 'cscope:hook)

;;; desktop-file-utils site-lisp configuration

(add-to-list 'load-path "/usr/share/emacs/site-lisp/desktop-file-utils")
(autoload 'desktop-entry-mode "desktop-entry-mode" "Desktop Entry mode" t)
(add-to-list 'auto-mode-alist
 '("\\.desktop\\(\\.in\\)?$" . desktop-entry-mode))
(add-hook 'desktop-entry-mode-hook 'turn-on-font-lock)

;;; doxymacs site-lisp configuration

(add-to-list 'load-path "/usr/share/emacs/site-lisp/doxymacs")
(autoload 'doxymacs-mode "doxymacs"
  "Minor mode for using/creating Doxygen documentation." t)
(autoload 'doxymacs-font-lock "doxymacs"
  "Turn on font-lock for Doxygen keywords." t)
(add-hook 'c-mode-common-hook 'doxymacs-mode)

;; optional font-lock support
;;(defun gentoo-doxymacs-font-lock-hook ()
;;  (if (or (eq major-mode 'c-mode) (eq major-mode 'c++-mode))
;;      (doxymacs-font-lock)))
;;(add-hook 'font-lock-mode-hook 'gentoo-doxymacs-font-lock-hook)

;;; dropdown-list site-lisp configuration

(add-to-list 'load-path "/usr/share/emacs/site-lisp/dropdown-list")
(autoload 'dropdown-list "dropdown-list")

;;; dev-vcs/git site-lisp configuration

(add-to-list 'load-path "/usr/share/emacs/site-lisp/git")
(autoload 'git-status "git" "Entry point into git-status mode." t)
;;(autoload 'git-blame-mode "git-blame"
;;  "Minor mode for incremental blame for Git." t)

;; GNU Emacs >=22.2 already includes vc-git.el.
;; Enable the following only if Emacs has no GIT support.
(unless (fboundp 'vc-git-registered)
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/git/compat")
  (add-to-list 'vc-handled-backends 'GIT))

;;; google-c-style site-lisp configuration

(add-to-list 'load-path "/usr/share/emacs/site-lisp/google-c-style")
(autoload 'google-set-c-style "google-c-style"
  "Set the current buffer's c-style to Google C/C++ Programming Style." t)
(autoload 'google-make-newline-indent "google-c-style"
  "Sets up preferred newline behavior." t)

;;; guile site-lisp configuration

(add-to-list 'load-path "/usr/share/emacs/site-lisp/guile")

;;; lua-mode site-lisp configuration

(add-to-list 'load-path "/usr/share/emacs/site-lisp/lua-mode")
(autoload 'lua-mode "lua-mode" "Mode for editing Lua scripts" t)
(add-to-list 'auto-mode-alist '("\\.lua\\'" . lua-mode))
(setq lua-default-application "/usr/bin/lua")

;;; po-mode site-lisp configuration

(add-to-list 'load-path "/usr/share/emacs/site-lisp/po-mode")
(autoload 'po-mode "po-mode" "Major mode for translators to edit PO files" t)
(or (fboundp 'po-find-file-coding-system)
    (autoload 'po-find-file-coding-system "po-compat"))

(add-to-list 'auto-mode-alist '("\\.po\\'\\|\\.po\\." . po-mode))
(modify-coding-system-alist 'file "\\.po\\'\\|\\.po\\."
			    'po-find-file-coding-system)

;;; yasnippet site-lisp configuration

(add-to-list 'load-path "/usr/share/emacs/site-lisp/yasnippet")
(autoload 'yas/initialize "yasnippet" "Do necessary initialization.")
(autoload 'yas/load-directory "yasnippet"
  "Load snippet definition from a directory hierarchy." t)

;;; redo site-lisp configuration

(add-to-list 'load-path "/usr/share/emacs/site-lisp/redo")

;;; gtk-doc site-lisp configuration

(add-to-list 'load-path "/usr/share/emacs/site-lisp/gtk-doc")

(autoload 'gtk-doc-insert "gtk-doc"
  "Add a documentation header to the current function." t)
(autoload 'gtk-doc-insert-section "gtk-doc"
  "Add a section documentation header at the current position." t)


(provide 'site-gentoo)

;; Local Variables:
;; no-byte-compile: t
;; buffer-read-only: t
;; End:

;;; site-gentoo.el ends here
